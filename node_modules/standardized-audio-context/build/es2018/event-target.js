import { wrapEventListener } from './helpers/wrap-event-listener';
export class EventTarget {
    constructor(_nativeEventTarget) {
        this._nativeEventTarget = _nativeEventTarget;
        this._listeners = new WeakMap();
    }
    addEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,
    options) {
        let wrappedEventListener = this._listeners.get(listener);
        if (wrappedEventListener === undefined) {
            wrappedEventListener = wrapEventListener(this, listener);
            if (typeof listener === 'function') {
                this._listeners.set(listener, wrappedEventListener);
            }
        }
        return this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);
    }
    dispatchEvent(event) {
        return this._nativeEventTarget.dispatchEvent(event);
    }
    removeEventListener(type, listener, // @todo EventListenerOrEventListenerObject | null = null,
    options) {
        const wrappedEventListener = this._listeners.get(listener);
        return this._nativeEventTarget.removeEventListener(type, (wrappedEventListener === undefined) ? null : wrappedEventListener, options);
    }
}
//# sourceMappingURL=/build/es2018/event-target.js.map