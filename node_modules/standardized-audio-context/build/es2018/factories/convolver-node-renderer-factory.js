import { getNativeAudioNode } from '../helpers/get-native-audio-node';
import { isOwnedByContext } from '../helpers/is-owned-by-context';
import { renderInputsOfAudioNode } from '../helpers/render-inputs-of-audio-node';
export const createConvolverNodeRendererFactory = (createNativeConvolverNode) => {
    return () => {
        let nativeConvolverNodePromise = null;
        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {
            let nativeConvolverNode = getNativeAudioNode(proxy);
            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.
            if (!isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext)) {
                const options = {
                    buffer: nativeConvolverNode.buffer,
                    channelCount: nativeConvolverNode.channelCount,
                    channelCountMode: nativeConvolverNode.channelCountMode,
                    channelInterpretation: nativeConvolverNode.channelInterpretation,
                    disableNormalization: !nativeConvolverNode.normalize
                };
                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);
            return nativeConvolverNode;
        };
        return {
            render(proxy, nativeOfflineAudioContext) {
                if (nativeConvolverNodePromise === null) {
                    nativeConvolverNodePromise = createConvolverNode(proxy, nativeOfflineAudioContext);
                }
                return nativeConvolverNodePromise;
            }
        };
    };
};
//# sourceMappingURL=/build/es2018/factories/convolver-node-renderer-factory.js.map