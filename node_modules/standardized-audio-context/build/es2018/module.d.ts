import { IAnalyserNode, IAudioBuffer, IAudioBufferSourceNode, IAudioContext, IAudioNode, IAudioWorkletNode, IBiquadFilterNode, IConstantSourceNode, IConvolverNode, IDelayNode, IDynamicsCompressorNode, IGainNode, IIIRFilterNode, IMediaElementAudioSourceNode, IMediaStreamAudioSourceNode, IMinimalAudioContext, IMinimalOfflineAudioContext, IOfflineAudioContext, IOfflineAudioContextConstructor, IOscillatorNode, IPannerNode, IPeriodicWave, IStereoPannerNode, IWaveShaperNode } from './interfaces';
import { TAddAudioWorkletModuleFunction, TAnalyserNodeConstructor, TAudioBufferConstructor, TAudioBufferSourceNodeConstructor, TAudioContextConstructor, TAudioWorkletNodeConstructor, TBiquadFilterNodeConstructor, TChannelMergerNodeConstructor, TChannelSplitterNodeConstructor, TConstantSourceNodeConstructor, TConvolverNodeConstructor, TDecodeAudioDataFunction, TDelayNodeConstructor, TDynamicsCompressorNodeConstructor, TGainNodeConstructor, TIIRFilterNodeConstructor, TMediaElementAudioSourceNodeConstructor, TMediaStreamAudioSourceNodeConstructor, TMinimalAudioContextConstructor, TMinimalOfflineAudioContextConstructor, TOscillatorNodeConstructor, TPannerNodeConstructor, TPeriodicWaveConstructor, TStereoPannerNodeConstructor, TWaveShaperNodeConstructor } from './types';
export * from './interfaces';
export * from './types';
declare const analyserNodeConstructor: TAnalyserNodeConstructor;
declare type analyserNodeConstructor = IAnalyserNode;
export { analyserNodeConstructor as AnalyserNode };
declare const audioBufferConstructor: TAudioBufferConstructor;
declare type audioBufferConstructor = IAudioBuffer;
export { audioBufferConstructor as AudioBuffer };
declare const audioBufferSourceNodeConstructor: TAudioBufferSourceNodeConstructor;
declare type audioBufferSourceNodeConstructor = IAudioBufferSourceNode;
export { audioBufferSourceNodeConstructor as AudioBufferSourceNode };
declare const biquadFilterNodeConstructor: TBiquadFilterNodeConstructor;
declare const channelMergerNodeConstructor: TChannelMergerNodeConstructor;
declare const channelSplitterNodeConstructor: TChannelSplitterNodeConstructor;
declare const constantSourceNodeConstructor: TConstantSourceNodeConstructor;
declare const convolverNodeConstructor: TConvolverNodeConstructor;
declare const delayNodeConstructor: TDelayNodeConstructor;
declare const dynamicsCompressorNodeConstructor: TDynamicsCompressorNodeConstructor;
declare const gainNodeConstructor: TGainNodeConstructor;
declare const iIRFilterNodeConstructor: TIIRFilterNodeConstructor;
declare const oscillatorNodeConstructor: TOscillatorNodeConstructor;
declare const pannerNodeConstructor: TPannerNodeConstructor;
declare const periodicWaveConstructor: TPeriodicWaveConstructor;
declare const stereoPannerNodeConstructor: TStereoPannerNodeConstructor;
declare const waveShaperNodeConstructor: TWaveShaperNodeConstructor;
export declare const addAudioWorkletModule: undefined | TAddAudioWorkletModuleFunction;
export declare const decodeAudioData: TDecodeAudioDataFunction;
declare const mediaElementAudioSourceNodeConstructor: TMediaElementAudioSourceNodeConstructor;
declare const mediaStreamAudioSourceNodeConstructor: TMediaStreamAudioSourceNodeConstructor;
declare const audioContextConstructor: TAudioContextConstructor;
declare type audioContextConstructor = IAudioContext;
export { audioContextConstructor as AudioContext };
declare const audioWorkletNodeConstructor: undefined | TAudioWorkletNodeConstructor;
declare type audioWorkletNodeConstructor = undefined | IAudioWorkletNode;
export { audioWorkletNodeConstructor as AudioWorkletNode };
declare type biquadFilterNodeConstructor = IBiquadFilterNode;
export { biquadFilterNodeConstructor as BiquadFilterNode };
declare type channelMergerNodeConstructor = IAudioNode;
export { channelMergerNodeConstructor as ChannelMergerNode };
declare type channelSplitterNodeConstructor = IAudioNode;
export { channelSplitterNodeConstructor as ChannelSplitterNode };
declare type constantSourceNodeConstructor = IConstantSourceNode;
export { convolverNodeConstructor as ConvolverNode };
declare type convolverNodeConstructor = IConvolverNode;
export { constantSourceNodeConstructor as ConstantSourceNode };
declare type delayNodeConstructor = IDelayNode;
export { delayNodeConstructor as DelayNode };
declare type dynamicsCompressorNodeConstructor = IDynamicsCompressorNode;
export { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };
declare type gainNodeConstructor = IGainNode;
export { gainNodeConstructor as GainNode };
declare type iIRFilterNodeConstructor = IIIRFilterNode;
export { iIRFilterNodeConstructor as IIRFilterNode };
declare type mediaElementAudioSourceNodeConstructor = IMediaElementAudioSourceNode;
export { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };
declare type mediaStreamAudioSourceNodeConstructor = IMediaStreamAudioSourceNode;
export { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };
declare const minimalAudioContextConstructor: TMinimalAudioContextConstructor;
declare type minimalAudioContextConstructor = IMinimalAudioContext;
export { minimalAudioContextConstructor as MinimalAudioContext };
declare const minimalOfflineAudioContextConstructor: TMinimalOfflineAudioContextConstructor;
declare type minimalOfflineAudioContextConstructor = IMinimalOfflineAudioContext;
export { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };
declare const offlineAudioContextConstructor: IOfflineAudioContextConstructor;
declare type offlineAudioContextConstructor = IOfflineAudioContext;
export { offlineAudioContextConstructor as OfflineAudioContext };
declare type oscillatorNodeConstructor = IOscillatorNode;
export { oscillatorNodeConstructor as OscillatorNode };
declare type pannerNodeConstructor = IPannerNode;
export { pannerNodeConstructor as PannerNode };
declare type periodicWaveConstructor = IPeriodicWave;
export { periodicWaveConstructor as PeriodicWave };
declare type stereoPannerNodeConstructor = IStereoPannerNode;
export { stereoPannerNodeConstructor as StereoPannerNode };
declare type waveShaperNodeConstructor = IWaveShaperNode;
export { waveShaperNodeConstructor as WaveShaperNode };
export declare const isSupported: () => Promise<boolean>;
//# sourceMappingURL=/build/es2018/module.d.ts.map