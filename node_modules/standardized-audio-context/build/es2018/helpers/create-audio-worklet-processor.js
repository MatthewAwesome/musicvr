import { NODE_TO_PROCESSOR_MAPS } from '../globals';
import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';
const createAudioWorkletProcessorPromise = async (processorDefinition, audioWorkletNodeOptions) => {
    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);
    return new processorDefinition(clonedAudioWorkletNodeOptions);
};
export const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorDefinition, audioWorkletNodeOptions) => {
    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);
    if (nodeToProcessorMap === undefined) {
        nodeToProcessorMap = new WeakMap();
        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);
    }
    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorDefinition, audioWorkletNodeOptions);
    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);
    return audioWorkletProcessorPromise;
};
//# sourceMappingURL=/build/es2018/helpers/create-audio-worklet-processor.js.map