"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var DEFAULT_TEMPO = 120;
var DEFAULT_QUANTIZATION = 4;
var DEFAULT_SAMPLE_RATE = 44100;

function pitchConsensus(detectors, chunk) {
  var pitches = detectors.map(function (fn) {
    return fn(chunk);
  }).filter(Boolean).sort(function (a, b) {
    return a < b ? -1 : 1;
  });

  // In the case of one pitch, return it.
  if (pitches.length === 1) {
    return pitches[0];

    // In the case of two pitches, return the geometric mean if they
    // are close to each other, and the lower pitch otherwise.
  } else if (pitches.length === 2) {
    var _pitches = _slicedToArray(pitches, 2),
        first = _pitches[0],
        second = _pitches[1];

    return first * 2 > second ? Math.sqrt(first * second) : first;

    // In the case of three or more pitches, filter away the extremes
    // if they are very extreme, then take the geometric mean. 
  } else {
    var _first = pitches[0];
    var _second = pitches[1];
    var secondToLast = pitches[pitches.length - 2];
    var last = pitches[pitches.length - 1];

    var filtered1 = _first * 2 > _second ? pitches : pitches.slice(1);
    var filtered2 = secondToLast * 2 > last ? filtered1 : filtered1.slice(0, -1);
    return Math.pow(filtered2.reduce(function (t, p) {
      return t * p;
    }, 1), 1 / filtered2.length);
  }
}

module.exports = function (detector, float32AudioBuffer) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


  var tempo = options.tempo || DEFAULT_TEMPO;
  var quantization = options.quantization || DEFAULT_QUANTIZATION;
  var sampleRate = options.sampleRate || DEFAULT_SAMPLE_RATE;

  var bufferLength = float32AudioBuffer.length;
  var chunkSize = Math.round(sampleRate * 60 / (quantization * tempo));

  var getPitch = void 0;
  if (Array.isArray(detector)) {
    getPitch = pitchConsensus.bind(null, detector);
  } else {
    getPitch = detector;
  }

  var pitches = [];
  for (var i = 0, max = bufferLength - chunkSize; i <= max; i += chunkSize) {
    var chunk = float32AudioBuffer.slice(i, i + chunkSize);
    var pitch = getPitch(chunk);
    pitches.push(pitch);
  }

  return pitches;
};